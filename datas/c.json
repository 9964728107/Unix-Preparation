[
    {
        "program": "C lab program 1",
        "lang": "language-c",
        "question": "C program that creates a child process to read commands from the standard input and execute them (a minimal implementation of a shell-like program). You can assume that no arguments will be passed to the commands to be executed.",
        "code": "#include<stdio.h>\n#include<unistd.h>\n#include<string.h>\n\nint main()\n{\n    int pid, status;\n    char comd[20];\n\n    pid = fork();\n\n    if (pid == -1)\n    {\n        printf(\"fork error\");\n        exit(1);\n    }\n    else if (pid == 0)\n    {\n        printf(\"\\n Child process\");\n        while (strcmp(comd, \"exit\") != 0)\n        {\n            printf(\"[user@localhost ~]$ \");\n            gets(comd);\n            system(comd);\n        }\n        exit(0);\n    }\n    else\n    {\n        wait(&status);\n\n        printf(\"\\n Parent process\");\n        printf(\"\\n PID of process is %d\", getpid());\n        printf(\"\\n PID of Child process is %d\", pid);\n    }\n\n    return 0;\n}",
        "output": "hp:~$ ./PrgC1 hp@hp\nchild process\n[user@localhost ~]$touch abc\n[user@localhost ~]$touch xyz\n[user@localhost ~]$cat > xyz\nHello all\n[user@localhost ~]$cat xyz\nHello all\n[user@localhost ~]$ls -1 xyz abc tree.sh 1.c\n-rw-rw-r-- 1 hp hp 310 Oct 25 12:11 1.c\n-rw-rw-r-- 1 hp hp 0 Oct 25 12:18 abc\n-rw-rw-r-- 1 hp hp 279 Dec 21 2022 tree.sh\n-rw-rw-r-- 1 hp hp 10 Oct 25 12:18 xyz\n[user@localhost ~]$exit\nparent process",
        "conceptual_summary": "This C program creates a child process to read and execute commands from the standard input, providing a minimal shell-like interface. The child process continues to execute commands until the user inputs 'exit'. The parent process waits for the child to finish using wait() and prints its own process ID along with the child process ID before exiting."
    },
    {
        "program": "C lab program 2",
        "lang": "language-c",
        "question": "Write a C Program to register a signal handler for SIGINT, and when it receives the signal, the program should print some information about the origin of the signal.",
        "code": "#include<stdio.h>\n#include<signal.h>\n\nvoid sig_handler(int signo)\n{\n    printf(\"signal caught is %d \\t\", signo);\n}\n\nint main(void)\n{\n    (void) signal(SIGINT, sig_handler);\n    while (1)\n    {\n        printf(\"Hello World\\n\");\n        sleep(1);\n    }\n    return 0;\n}",
        "output": "hp@hp:~$ ./PrgC2\nHello World\nHello World\nHello World\n^Csignal caught is 2\nHello World\nHello World\nHello World\n^Csignal caught is 2\nHello World\nHello World\nHello World\n^Csignal caught is 2\nHello World\nHello World\nHello World\n[2]+ Stopped\n./PrgC2",
        "conceptual_summary": "This C program registers a signal handler for SIGINT. When the program receives the SIGINT signal (generated by pressing Ctrl+C), it prints information about the origin of the signal. The program continues to print 'Hello World' in a loop."
    },
    {
        "program": "C sample program 1",
        "lang": "language-c",
        "question": "C program to do the following: Using fork create a child process. The child process prints its own process id and id of its parent and then exists. The parent process waits for its child to finish (by executing the wait()) and prints its own process-id and the id of its child process and then exists.",
        "code": "#include<stdio.h>\n#include<unistd.h>\n\nint main()\n{\n    int pid, status, cpid;\n    pid = fork();\n\n    if (pid == -1)\n    {\n        printf(\"fork error\");\n        exit(1);\n    }\n    else if (pid == 0)\n    {\n        printf(\"\\n Child process\");\n        printf(\"\\n PID of the process is %d\", getpid());\n        printf(\"\\n Parent PID of the process is %d\", getppid());\n        exit(0);\n    }\n    else\n    {\n        cpid = wait(&status);\n\n        printf(\"\\n Parent process\");\n        printf(\"\\n PID of process is %d\", getpid());\n        printf(\"\\n PID of Child process is %d\", pid);\n    }\n\n    return 0;\n}",
        "output": "student@ISL03-17:~/Downloads$ ./a.out\nChild process\nPID of the process is 3550\nParent PID of the process is 3549\nParent process\nPID of process is 3549\nPID of Child process is 3550",
        "conceptual_summary": "This C program uses fork to create a child process. The child process prints its own process ID and the ID of its parent before exiting. The parent process waits for its child to finish using wait() and then prints its own process ID and the child process ID before exiting."
    },
    {
        "program": "C sample program 2",
        "lang": "language-c",
        "question": "C program to prompt the user for the name of an environment variable and print its value if it is defined and a suitable message otherwise; and to repeat the process if the user wants it.",
        "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\nint main()\n{\n    char *value, name[50];\n    \n    do\n    {\n        printf(\"\\nEnter an environment variable: \");\n        scanf(\"%s\", name);\n\n        if ((value = getenv(name)) == NULL)\n            printf(\"\\n%s is an invalid environment variable\", name);\n        else\n            printf(\"\\nValue of %s is %s\", name, value);\n\n        printf(\"\\nDo you want to check another environment variable? (y/n): \");\n        char choice;\n        scanf(\" %c\", &choice); // Note the space before %c to consume the newline character\n\n    } while (choice == 'y' || choice == 'Y');\n\n    return 0;\n}",
        "output": "student@ISL03-17:~/Downloads$ ./a.out\nEnter an environment variable: HOME\nValue of HOME is /home/student\nDo you want to check another environment variable? (y/n): y\n\nEnter an environment variable: SHELL\nValue of SHELL is /bin/bash\nDo you want to check another environment variable? (y/n): n",
        "conceptual_summary": "This C program prompts the user for the name of an environment variable and prints its value if it is defined. If the environment variable is not defined, it prints a suitable message. The program then asks the user if they want to check another environment variable and repeats the process accordingly."
    }
]