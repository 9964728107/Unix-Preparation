
     [
        {
            "program": "AWK Program 1",
            "question": "Design an AWK program to provide an extra symbol (e.g., * or @) at the end of each line (if required) so that the line length is maintained as 127.",
            "code": "BEGIN {\n    while (getline < \"input.txt\" > 0) {\n        len = length($0);\n        if (len < 127) {\n            diff = 127 - len;\n            padding = \"\";\n            for (i = 1; i <= diff; i++) {\n                padding = padding \"*\";\n            }\n            print $0 padding;\n        } else {\n            print $0;\n        }\n    }\n}",
            "output": "$ gedit pgm.awk\n$ cat > input.txt\nabc\ndefg\n^Z\n[3]+ Stopped        cat > input.txt\n$ awk -f program1.awk input.txt\nabc**********************************till line ends\ndefg*********************************till line ends",
            "conceptual_summary": "This AWK program reads lines from an input file, and if a line is shorter than 127 characters, it adds extra symbols (asterisks) at the end to maintain a length of 127 characters."
        },
        {
            "program": "AWK Program 2",
            "question":"Design an Awk script to delete duplicated lines from a text file. The order of the original mustremain unchanged.",
            "code": "BEGIN {\n    while (getline < \"input.txt\" > 0) {\n        if (!seen[$0]++) {\n            print $0;\n        }\n    }\n}",
            "output": "$ gedit dup.awk\n$ cat>input.txt\nPrincess\nPrincess\nPrince\n^Z\n[3]+ Stopped\ncat > input.txt\nawk -f dup.awk input.txt\nPrincess\nPrince\n",
            "conceptual_summary": "This AWK program reads lines from an input file and removes duplicate lines, preserving the original order of the lines."
        },
        {
            "program": "Perl Program 1",
            "question": "Implement a Perl script that prompts the user to input a string and a number, then prints the string that many times, with each string on a separate line.",
            "code": "print \"string: \";\n$a = <STDIN>;\nprint \"No. of times string to be displayed: \";\nchop($b = <STDIN>);\n$c = $a x $b;\nprint \"Result is: \\n$c\";",
            "output": "$ gedit 3.pl\n$ perl 3.pl\nstring:ara ara\nNo. of times string to be dispalyed6\nresult is:\nara ara\nara ara\nara ara\nara ara\nara ara\nara ara\n",
            "conceptual_summary": "This Perl script prompts the user for a string and a number, then prints the string the specified number of times on separate lines."
        },
        {
            "program": "Perl Program 2",
            "question": "Implement a Perl script that takes a file as an argument, checks whether the file exists, and prints 'binary' if the file is binary.",
            "code": "#!/usr/bin/perl\n\ndie(\"You have not entered the arguments\\n\") if (@ARGV == 0);\nforeach $filename (@ARGV) {\n    if (-e $filename) {\n        print(\"File $filename exists\\n\");\n        if (-B $filename) {\n            print(\"Binary file\\n\");\n        }\n        else {\n            print(\"Not a binary file\\n\");\n        }\n    }\n    else {\n        print(\"File $filename does not exist\\n\");\n    }\n}",
            "output": "$ gedit program2.pl\n$ perl program2.pl abc.txt\nFile abc.txt exists\nNot a binary file",
            "conceptual_summary": "This Perl script takes a file as an argument, checks its existence, and prints 'binary' if the file is binary; otherwise, it prints 'not a binary file.'"
        },
        {
            "program": "Perl Program 3",
            "question": "Implement a Perl script that translates its command-line arguments, one per line, after converting all lowercase letters to uppercase.",
            "code": "#!/usr/bin/perl\n\ndie(\"You have not entered the arguments\\n\") if (@ARGV == 0);\nforeach $arg (@ARGV) {\n    $arg = tr/a-z/A-Z/;\n    printf(\"%s\\n\", $arg);\n}",
            "output": "$ gedit 1.pl\n$ perl 1.pl abc\nABC\n$ perl 1.pl abc xyz lmn king hat\nABC\nXYZ\nLMN\nKING\nHAT\n$ |",
            "conceptual_summary": "This Perl script takes command-line arguments, converts all lowercase letters to uppercase, and prints each argument on a separate line."
        }
    ]
